// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pepelitto.Infrastructure.Context;

#nullable disable

namespace Pepelitto.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241202110146_mg61")]
    partial class mg61
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.BlockInfo", b =>
                {
                    b.Property<Guid>("BlockedUserGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BlockedUserGuid");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.Message", b =>
                {
                    b.Property<Guid>("MesssageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("From")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MessageContentJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MessageInboxUserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MessageTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("To")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MesssageId");

                    b.HasIndex("MessageInboxUserGuid");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.Post", b =>
                {
                    b.Property<Guid>("PostOwnerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SharedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Texts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostOwnerId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.PostPhoto", b =>
                {
                    b.Property<Guid>("PostPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostPhotoId");

                    b.ToTable("PostPhotos");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.Story", b =>
                {
                    b.Property<Guid>("StoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SeenList")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoryContentJson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StoryID");

                    b.HasIndex("AppUserId");

                    b.ToTable("Stories");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.UserTag", b =>
                {
                    b.Property<Guid>("AppUserGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AppUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AppUserGuid");

                    b.HasIndex("AppUserId");

                    b.ToTable("UserTags");
                });

            modelBuilder.Entity("Pepelitto.Domain.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Followers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Followings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPremium")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProfileHidden")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("LoginType")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Pepelitto.Domain.Entities.MessageInbox", b =>
                {
                    b.Property<Guid>("UserGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FromUserGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserGuid");

                    b.ToTable("MessagesInboxes");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.Message", b =>
                {
                    b.HasOne("Pepelitto.Domain.Entities.MessageInbox", null)
                        .WithMany("MessageList")
                        .HasForeignKey("MessageInboxUserGuid");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.Post", b =>
                {
                    b.HasOne("Pepelitto.Domain.Entities.AppUser", null)
                        .WithMany("Posts")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.Story", b =>
                {
                    b.HasOne("Pepelitto.Domain.Entities.AppUser", null)
                        .WithMany("Stories")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Pepelitto.Domain.DataStructures.UserTag", b =>
                {
                    b.HasOne("Pepelitto.Domain.Entities.AppUser", null)
                        .WithMany("UserTags")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Pepelitto.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Posts");

                    b.Navigation("Stories");

                    b.Navigation("UserTags");
                });

            modelBuilder.Entity("Pepelitto.Domain.Entities.MessageInbox", b =>
                {
                    b.Navigation("MessageList");
                });
#pragma warning restore 612, 618
        }
    }
}
